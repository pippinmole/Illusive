@page
@using Westwind.AspNetCore.Markdown
@using global::Illusive.Utility
@using global::Illusive.Database
@using global::Illusive.Models.Extensions
@using Humanizer
@inject IAccountService AccountService
@model ForumPost
@{
    var content = this.Model.ForumData.Content;
    
    ViewData["Title"] = this.Model.ForumData.Title;
    ViewData["Description"] = content.Length < 20 ? content : content.Substring(0, 20);
}

<!DOCTYPE html>

<html>
<head>
    <title>@this.Model.ForumData.Title</title>
    
    <meta property="og:title" content="@this.Model.ForumData.Title"/>
    <meta property="og:description" content="Created @this.Model.ForumData.TimeCreated.Humanize()"/>
    
    <script src="~/js/party.js"></script>
    <script type="text/javascript">
        $(function () {
            document.querySelector(".like-post-action").addEventListener("mouseup", (e) => {
                e.preventDefault();
                party.element(document.querySelector(".like-post-action"), {
                    count: party.variation(30, 0.5),
                    color: party.array(['#ffa68d', '#fd3a84'])
                });
            });
        });
    
    </script>
    
    
    <style type="text/css">
        .commentField {
            width: 100%; 
            padding: 10px;
            margin: 10px 0;
            border: none;
            background-color: var(--container-colour-secondary);
            border-radius: 5px;
            color: inherit;
        }
        
        .forumTitle {
            margin-top: 25px;
        }
        
        .forumContent {
            background-color: var(--container-colour-secondary);
            border-bottom-left-radius: 7px;
            border-bottom-right-radius: 7px;
            padding: 15px;
            box-shadow: 0 1rem 1rem rgba(0, 0, 0, .1);
            word-wrap: break-word;
            width: 100%;
        }
        
        .forumContent img {
            display: block;
            max-height: 500px;
            width: auto;
        }
        
        .forumBody {
            width: 100%;
            display: inline-flex;
            margin-top: 30px;
            margin-bottom: 30px;
        }
        
        .replyBody {
            width: 100%;
            display: inline-flex;
            margin-top: 10px;
            margin-bottom: 10px;
            box-shadow: 0 1rem 1rem rgba(0, 0, 0, .1);
        }
        
        .replyContent {
            background-color: var(--container-colour-secondary);
            border-bottom-left-radius: 7px;
            border-bottom-right-radius: 7px;
            padding: 15px;
            word-wrap: break-word;
            width: 100%;
        }
        
        .forum-actions-container {
            background-color: var(--container-colour-primary);
            padding: 3px;
            display: flex;
            border-radius: 5px;
        }
        
        .forum-action {
            display: initial;
            width: initial;
            max-width: 35px;
            margin: 2px;
            height: 25px;
            cursor: pointer;
        }
    </style>
    
    @section scripts {
        <script>
        
        // Received a boolean state (True = liked, False = unliked)
        function ToggleLikeButton() {
            const state = $(".like-post-action").attr("src") === "https://illusivecdn.blob.core.windows.net/container-1/like_button_checked.png";
            UpdateLikeButton(!state);
        }
        
        function UpdateLikeButton(state) {
            const likeImage = $(".like-post-action");
            
            if (state === true) {
                console.log("Set button to liked");
                likeImage.attr("src","https://illusivecdn.blob.core.windows.net/container-1/like_button_checked.png");
            } else {
                console.log("Set button to unliked");
                likeImage.attr("src","https://illusivecdn.blob.core.windows.net/container-1/like_button_unchecked.png");
            }
            
            UpdateLikeCounter(state);
        }
        
        // Updates the amount of likes
        function UpdateLikeCounter(isLiked) {
            const likeText = $("span.like-post-text");
            let likes = parseInt(likeText.text().match(/\d/g));
            
            console.log(likeText)
            
            if (isLiked) likes++;
            else likes--;
            
            SetLikeCounter(likes);
        }
        
        function SetLikeCounter(value) {
            const likeText = $("span.like-post-text");
            likeText.text(value + (value === 1 ? " like" : " likes"));
        }
        
        $(() => {
            // Initialise starting state
            @{
                var initialLiked = this.Model.ForumData.HasLikeFrom(this.User);
                var likeCount = this.Model.ForumData.Likes.Count;
            }
            
            UpdateLikeButton(@Json.Serialize(initialLiked));
            SetLikeCounter(@Json.Serialize(likeCount));
            
            // Like button request
            $(".like-post-action").click(() => {
                $.ajax({
                    type: "POST",
                    url: "/ForumPost?handler=LikePost",
                    beforeSend: (xhr) =>  {
                        xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: JSON.stringify({
                        "forumId" : "@this.Model.ForumData.Id"
                    }),
                    success: (response) =>  {
                        // console.log(JSON.stringify(response))
                        
                    },
                    failure: (response) =>  {
                        alert(response);
                    },
                    complete: () => {
                        // Toggle like button client-side - We do this so we don't have to wait for the server's response which causes
                        // a delay in the front-end.
                        // ToggleLikeButton();
                    }
                });
                
                // Toggle like button client-side - We do this so we don't have to wait for the server's response which causes
                // a delay in the front-end.
                ToggleLikeButton();
            });
        });
        
        // Delete post request
        function DeletePost() {
            if (confirm("Are you sure you would like to delete this post?")) {
                $.ajax({
                    type: "POST",
                    url: "/ForumPost?handler=DeletePost",
                    beforeSend: (xhr) =>  {
                        xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: JSON.stringify({
                        "forumId" : "@this.Model.ForumData.Id"
                    }),
                    success: (response) =>  {
                        // console.log(JSON.stringify(response))
                        // UpdateLikeButton(response.result === "liked");
                        // UpdateLikeCounter(response.likeCount);
                        window.location.href = response.redirect;
                    },
                    failure: (response) =>  {
                        alert(response);
                    }
                });
            }
        }
        
        function DeleteReply(replyId) {
            if (confirm("Are you sure you would like to delete this reply? (" + replyId + ")")) {
                $.ajax({
                    type: "POST",
                    url: "/ForumPost?handler=DeleteReply",
                    beforeSend: (xhr) =>  {
                        xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                    },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: JSON.stringify({
                        "forumId" : "@this.Model.ForumData.Id",
                        "replyId" : replyId.toString()
                    }),
                    success: (response) =>  {
                        // console.log(JSON.stringify(response))
                        // UpdateLikeButton(response.result === "liked");
                        // UpdateLikeCounter(response.likeCount);
                        window.location.href = response.redirect;
                    },
                    failure: (response) =>  {
                        alert(response);
                    }
                });
            }
        }
        </script>
    }
</head>
<body>

@{
    var forum = this.Model.ForumData;
    var forumOwner = AccountService.GetAccountWhere(x => x.Id == forum.OwnerId);
}

<div>
    <span style="display: block ruby; padding-bottom: 8px; border-bottom: 1px solid black">
        <h3 class="forumTitle">@forum.Title</h3>
        @if ( forum.Tags != null ) {
            foreach ( var tag in forum.Tags.Split(',') ) {
                <div class="forumTag noselect">@tag</div>
            }
        }
    </span>
    
    <div class="forum-actions-container" style="margin-top: 10px">
        @if ( this.User.CanDeletePost(forum) || this.User.IsAdminAccount() ) {
            <div class="hovertip delete-post-action" onclick="DeletePost();">
                <img src="https://illusivecdn.blob.core.windows.net/container-1/trash_icon.png" height="28px" width="28px" alt=""/>
                <span class="hovertiptext-top">Delete post</span>
            </div>
            
            <a asp-page="EditPost" asp-route-id="@forum.Id">
                <div class="hovertip">
                    <img src="https://illusivecdn.blob.core.windows.net/container-1/icon-edit.png" height="28px" width="28px" style="padding: 3px" alt=""/>
                    <span class="hovertiptext-top">Edit post</span>
                </div>
            </a>
        }
    </div>

    <div class="forumBody">
        <div class="forum-author-container">
            <a href="/Account/@forumOwner?.Id"> <img class="forum-author-picture" style="margin: 5px auto auto;height: 40px; width: 40px; border-radius: 25px" src="@forumOwner?.ProfilePicture" alt=""></a>
            <p style="font-size: 0.6rem; margin: 0 0.1rem;">
                @if ( forumOwner?.IsAdmin == true ) {
                    <span style="color: red;">[Admin]</span>
                }
                <a href="/Account/@forumOwner?.Id"> @forumOwner?.AccountName</a>
            </p>
            <p style="font-size: 0.5rem; font-style: italic">Joined @forumOwner?.AccountCreated.ToShortDateString()</p>
        </div>

        <div class="forumContent">
            @if ( this.User.IsLoggedIn() ) {
                <div class="forum-actions-container hovertip float-right">
                    <img class="forum-action like-post-action" src="https://illusivecdn.blob.core.windows.net/container-1/like_button_unchecked.png" alt="">
                    <span class="hovertiptext-top like-post-text"></span>
                </div>
            }

            <span style="font-style: italic; font-size: 0.6rem; display: flex; margin-bottom: 10px">Created @forum.TimeCreated.Date.ToString("MMMM dd, yyyy") (@(forum.TimeCreated.TimeSince().Humanize()) ago)</span>

            <p style="min-width: 100%; width: 0">@Markdown.ParseHtmlString(forum.Content)</p>
        </div>
    </div>

    <div style="width: 100%; border-bottom: 1px solid black;">
        <h4 style="display: inline-flex">Comments
            @if ( !this.User.IsLoggedIn() ) {
                <div style="font-size: 0.7rem; height: 100%; margin: auto auto auto 5px;">(<a href="/Login">Login</a> or <a href="/Signup">Sign up</a> to comment on a post!)</div>
            }
        </h4>
    </div>

    @{
        var replies = forum.Replies;
        foreach ( var reply in replies ) {
            var replyOwner = AccountService.GetAccountWhere(x => x.Id == reply.AuthorId);

            <div class="replyBody">
                <div style="width: 100px; min-width: 100px; height: 100px; background-color: var(--container-colour-primary); display: grid; text-align: center; border-radius: 4px;">
                    <img style="margin: 5px auto auto;height: 40px; width: 40px; border-radius: 25px" src="@replyOwner?.ProfilePicture" alt="">
                    <p style="font-size: 0.6rem; margin: 0 0.1rem;">
                        @if ( replyOwner?.IsAdmin == true ) {
                            <span style="color: red;">[Admin]</span>
                        }
                        <a href="/Account/@replyOwner?.Id"> @replyOwner?.AccountName</a>
                    </p>
                    <p style="font-size: 0.5rem; font-style: italic">Joined @replyOwner?.AccountCreated.ToShortDateString()</p>
                </div>

                <div class="replyContent">
                    <span style="font-style: italic; font-size: 0.6rem; display: flex; margin-bottom: 10px">Commented @reply.TimeCreated.ToString("MMMM dd, yyyy") (@(reply.TimeCreated.TimeSince().Humanize()) ago)</span>

                    @if ( this.User.CanDeleteReply(reply) || this.User.IsAdminAccount() ) {
                        <div class="hovertip float-right" onclick="DeleteReply('@reply.Id');">
                            <img src="https://illusivecdn.blob.core.windows.net/container-1/trash_icon.png" height="28px" width="28px" alt=""/>
                            <span class="hovertiptext-top">Delete reply</span>
                        </div>
                    }
                    
                    <p style="min-width: 100%; width: 0">@reply.Content</p>
                </div>
            </div>
        }
    }

    @{
        if ( this.User.IsLoggedIn() ) {
            <form method="post">
                <div asp-validation-summary="All" class="text-danger"></div>
                <textarea class="commentField" asp-route-id="@forum.Id" asp-for="ForumReply.Content" placeholder="Reply to this post" multiple></textarea><br/>
                <button type="submit" class="button debounce">Comment on this</button>
                @Html.AntiForgeryToken()
            </form>
        }
    }
</div>
</body>
</html>